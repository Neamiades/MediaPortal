@model MediaService.PL.Models.ObjectViewModels.FileViewModels.UploadFilesViewModel



<div>
 
    <input type="hidden" name="ParentId"  id="ParentId" value="@Model.ParentId">
    <input type="file" id="FileUpload" multiple onchange="javascript:updateList()"/>
    <input type="button" id="Upload" value="Upload" />
    <br />Selected files:
    <div id="fileList"></div>
   

</div>

@*@*<div>
    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="file" id="fileUpload" multiple accept="video/*|image/*"/>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnCancel" value="Отмена" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnUpload" value="Загрузить" />
            </div>
        </div>
    </div>
</div>
<div id="file-holder"></div>


@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryajax")
<script>
    $("#fileUpload").on('change', function () {

        var file_holder = $("#file-holder");
        file_holder.empty();

        var imgAllowedTypes = ["image/png", "image/jpg", "image/jpeg"];
        var imgAllowedSize = 2097152;
        var videoAllowedTypes = ["video/quicktime", "video/x-msvideo", "video/x-matroska"];
        var videoAllowedSize = 52428800;

        var files = $(this)[0].files;

        if (typeof (FileReader) != "undefined") {

            for (var i = 0; i < files.length; i++) {
                var type = files[i].type;
                var size = files[i].size;
                var contentType = files[i].contentType;

                var reader = new FileReader();
                reader.onload = function (e) {
                    var stateThmbnl = "";
                    var contentThmbnl = "";
                    var errSpanText = "";

                    if(imgAllowedTypes.indexOf(type) > -1)
                    {
                        contentThmbnl = "/fonts/icons-buttons/picture.svg";
                        if (size <= imgAllowedSize ) {
                            var stateThmbnl = "/fonts/icons-buttons/success.svg";
                        }
                        else {
                            var stateThmbnl = "/fonts/icons-buttons/minus.svg";
                            errSpanText = "Images can have a maximum size of 2 MB";
                        }
                        stateThmbnl = size <= imgAllowedSize 
                            ? "/fonts/icons-buttons/success.svg"
                            : "/fonts/icons-buttons/minus.svg";
                    }
                    else if(videoAllowedTypes.indexOf(type) > -1)
                    {
                        contentThmbnl = "/fonts/icons-buttons/video-player.svg";
                        if (size <= videoAllowedSize ) {
                            var stateThmbnl = "/fonts/icons-buttons/success.svg";
                        }
                        else {
                            var stateThmbnl = "/fonts/icons-buttons/minus.svg";
                            errSpanText = "Videos can have a maximum size of 50 MB";
                        }
                    }
                    else
                    {
                        contentThmbnl = "/fonts/icons-buttons/cancel.svg";
                        stateThmbnl = "/fonts/icons-buttons/minus.svg";
                        errSpanText = "Allowed file types are: jpg, png, mov, avi, mkv";
                    }
                    $("<img />", {
                        "src": stateThmbnl,
                        "class": "thumb-image"
                    }).appendTo(file_holder);
                    $("<img />", {
                        "src": contentThmbnl,
                        "class": "thumb-image"
                    }).appendTo(file_holder);
                    $("<span>" + errSpanText + "<span/>", {
                        "class": "text-danger"
                    }).appendTo(file_holder);
                    $("<label>" + e.target.result.name + "<label/>", {
                        "class": "file-name"
                    }).appendTo(file_holder);
                    $("<input />", {
                        "type": "text",
                        "name": "tags"
                    }).appendTo(file_holder);
                    $("<input />", {
                        "type": "file",
                        "hidden": true,
                        "value": e.target.result //files[i]
                    }).appendTo(file_holder);
                }

                file_holder.show();
                reader.readAsArrayBuffer(files[i]);
            }
        } else {
            alert("This browser does not support FileReader.");
        }
    });


    $(document).ready(function() {
        $('#btnUpload').click(function() {

            if (window.FormData !== undefined) {

                var fileUpload = $("#fileUpload").get(0);
                var files = fileUpload.files;
                var fileData = new FormData();

                for (var i = 0; i < files.length; i++) {
                    fileData.append(files[i].name, files[i]);
                }

                $.ajax({
                    url: '/File/UploadFilesAjax?parentId=@Model.ParentId',
                    type: "POST",
                    contentType: false,
                    processData: false,
                    data: fileData,
                    success: function(data) {
                        $('#files').html(data);
                    },
                    error: function(err) {
                        alert(err.statusText);
                    }
                });
            } else {
                alert("FormData is not supported.");
            }
        });
    });
</script>*@